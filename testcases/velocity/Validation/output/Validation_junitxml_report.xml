<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite name="pytest" errors="0" failures="1" skipped="0" tests="14" time="269.152" timestamp="2023-03-14T18:36:39.608601" hostname="Jeesa"><testcase classname="test_NavigationMenu.TestLeftNavigationMenu" name="test_LeftNavigationMenu" time="108.356" /><testcase classname="test_ValidateHamburgerMenus.TestValidateHamburgerMenus" name="test_validateDashboardSettings" time="6.722" /><testcase classname="test_ValidateHamburgerMenus.TestValidateHamburgerMenus" name="test_validateAddDeviceList" time="20.117" /><testcase classname="test_ValidateHamburgerMenus.TestValidateHamburgerMenus" name="test_validateToolsDeviceList" time="35.539" /><testcase classname="test_ValidateHamburgerMenus.TestValidateHamburgerMenus" name="test_validateFloorHamburgerMenu" time="16.347" /><testcase classname="test_ValidateMultiplePaths.TestValidateMultiplePaths" name="test_validatePaths2Sites" time="8.947" /><testcase classname="test_ValidateMultiplePaths.TestValidateMultiplePaths" name="test_validatePaths2AddBuilding" time="4.631" /><testcase classname="test_ValidateMultiplePaths.TestValidateMultiplePaths" name="test_validatePaths2RoomlistOfAnyBuilding" time="7.372" /><testcase classname="test_ValidateMultiplePaths.TestValidateMultiplePaths" name="test_validatePaths2RoomlistOfFullSite" time="7.945" /><testcase classname="test_ValidateMultiplePaths.TestValidateMultiplePaths" name="test_validatePaths2RoomModifyDevice" time="11.223" /><testcase classname="test_validateCardItems.TestValidateCardItems" name="test_validateSiteCardItems" time="5.186" /><testcase classname="test_validateCardItems.TestValidateCardItems" name="test_validateBuildingCardItems" time="0.674" /><testcase classname="test_validateCardItems.TestValidateCardItems" name="test_validateRoomCardItems" time="0.782" /><testcase classname="test_validateQuestionMarks.TestValidateQuestionMarks" name="test_ValidateQuestionMarks" time="35.023"><failure message="selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element is not clickable at point (-130, 480)&#10;  (Session info: chrome=111.0.5563.65)&#10;Stacktrace:&#10;Backtrace:&#10;&#09;(No symbol) [0x0078DCE3]&#10;&#09;(No symbol) [0x007239D1]&#10;&#09;(No symbol) [0x00634DA8]&#10;&#09;(No symbol) [0x006652EA]&#10;&#09;(No symbol) [0x00663BBA]&#10;&#09;(No symbol) [0x00661EFB]&#10;&#09;(No symbol) [0x00661027]&#10;&#09;(No symbol) [0x00658D05]&#10;&#09;(No symbol) [0x0067AECC]&#10;&#09;(No symbol) [0x00658726]&#10;&#09;(No symbol) [0x0067B224]&#10;&#09;(No symbol) [0x0068D57C]&#10;&#09;(No symbol) [0x0067ACC6]&#10;&#09;(No symbol) [0x00656F68]&#10;&#09;(No symbol) [0x006580CD]&#10;&#09;GetHandleVerifier [0x00A03832+2506274]&#10;&#09;GetHandleVerifier [0x00A39794+2727300]&#10;&#09;GetHandleVerifier [0x00A3E36C+2746716]&#10;&#09;GetHandleVerifier [0x00836690+617600]&#10;&#09;(No symbol) [0x0072C712]&#10;&#09;(No symbol) [0x00731FF8]&#10;&#09;(No symbol) [0x007320DB]&#10;&#09;(No symbol) [0x0073C63B]&#10;&#09;BaseThreadInitThunk [0x76667D69+25]&#10;&#09;RtlInitializeExceptionChain [0x778CBB9B+107]&#10;&#09;RtlClearBits [0x778CBB1F+191]">self = &lt;testcases.velocity.Validation.test_validateQuestionMarks.TestValidateQuestionMarks object at 0x000002116964DB40&gt;

    def test_ValidateQuestionMarks(self):
    
        # wait until Login page loaded successfully
        self.wait.until(EC.title_contains("Login"))
        # Verify the page after launching the Velocity App
        assert "Atlona Velocity | Login To The System" in self.driver.title
    
        login = LoginPage(self.driver, self.wait)
        login.validateLoginHelp()
    
        # Verify the page after launching the Velocity App
        assert "Atlona Velocity | Login To The System" in self.driver.title
    
        login.validateSyncHelp()
    
        # Verify the page after launching the Velocity App
        assert "Atlona Velocity | Login To The System" in self.driver.title
    
        login.validateForgotPassHelp()
    
        # Login to the velocity app
        ut = Utils(self.driver, self.wait)
        ut.login()
    
        homePage = HomePage(self.driver, self.wait)
    
        homePage.clickNavBar()
    
        # Verify if the sidebar is visible
        assert homePage.visibilityOfSidebarMenu() is True
    
        leftNav = LeftBarMenu(self.driver, self.wait)
    
        leftNav.clickControl()
        leftNav.clickCon_allRooms()
    
        # wait until the destination page is loaded successfully
        self.wait.until(EC.title_contains("Room List"))
    
        assert "Atlona Velocity | Room List" in self.driver.title
    
        roomList = RoomListPage(self.driver, self.wait)
    
        roomList.validateRoomsHelp()
    
        assert "Atlona Velocity | Room List" in self.driver.title
    
        roomList.validateFloor1Help()
    
        assert "Atlona Velocity | Room List" in self.driver.title
    
        homePage.clickNavBar()
    
        # Verify if the sidebar is visible
        assert homePage.visibilityOfSidebarMenu() is True
    
        leftNav.clickScheduling()
        leftNav.clickSch_manage()
    
        # wait until the destination page is loaded successfully
        self.wait.until(EC.title_contains("Calendar Integration List"))
    
        assert "Atlona Velocity | Calendar Integration List" in self.driver.title
    
        clIntLst = CalendarIntegrationListPage(self.driver, self.wait)
        clIntLst.validateClIntLstHelp()
    
        assert "Atlona Velocity | Calendar Integration List" in self.driver.title
    
        homePage.clickNavBar()
    
        # Verify if the sidebar is visible
        assert homePage.visibilityOfSidebarMenu() is True
    
&gt;       leftNav.clickSettings()

test_validateQuestionMarks.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
..\..\..\pages\velocity\menus\LeftBarMenu.py:266: in clickSettings
    self.getSettings().click()
C:\Users\User\AppData\Roaming\Python\Python310\site-packages\selenium\webdriver\remote\webelement.py:88: in click
    self._execute(Command.CLICK_ELEMENT)
C:\Users\User\AppData\Roaming\Python\Python310\site-packages\selenium\webdriver\remote\webelement.py:396: in _execute
    return self._parent.execute(command, params)
C:\Users\User\AppData\Roaming\Python\Python310\site-packages\selenium\webdriver\remote\webdriver.py:428: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000002116956AD10&gt;
response = {'status': 400, 'value': '{"value":{"error":"element click intercepted","message":"element click intercepted: Element ...dInitThunk [0x76667D69+25]\\n\\tRtlInitializeExceptionChain [0x778CBB9B+107]\\n\\tRtlClearBits [0x778CBB1F+191]\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -&gt; None:
        """
        Checks that a JSON response from the WebDriver does not have an error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get('status', None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get('value', None)
            if value_json and isinstance(value_json, str):
                import json
                try:
                    value = json.loads(value_json)
                    if len(value.keys()) == 1:
                        value = value['value']
                    status = value.get('error', None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get('message')
                    else:
                        message = value.get('message', None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        if status in ErrorCode.NO_SUCH_ELEMENT:
            exception_class = NoSuchElementException
        elif status in ErrorCode.NO_SUCH_FRAME:
            exception_class = NoSuchFrameException
        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:
            exception_class = NoSuchShadowRootException
        elif status in ErrorCode.NO_SUCH_WINDOW:
            exception_class = NoSuchWindowException
        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:
            exception_class = StaleElementReferenceException
        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:
            exception_class = ElementNotVisibleException
        elif status in ErrorCode.INVALID_ELEMENT_STATE:
            exception_class = InvalidElementStateException
        elif status in ErrorCode.INVALID_SELECTOR \
                or status in ErrorCode.INVALID_XPATH_SELECTOR \
                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:
            exception_class = InvalidSelectorException
        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:
            exception_class = ElementNotSelectableException
        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:
            exception_class = ElementNotInteractableException
        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:
            exception_class = InvalidCookieDomainException
        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:
            exception_class = UnableToSetCookieException
        elif status in ErrorCode.TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.SCRIPT_TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.UNKNOWN_ERROR:
            exception_class = WebDriverException
        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:
            exception_class = UnexpectedAlertPresentException
        elif status in ErrorCode.NO_ALERT_OPEN:
            exception_class = NoAlertPresentException
        elif status in ErrorCode.IME_NOT_AVAILABLE:
            exception_class = ImeNotAvailableException
        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:
            exception_class = ImeActivationFailedException
        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:
            exception_class = MoveTargetOutOfBoundsException
        elif status in ErrorCode.JAVASCRIPT_ERROR:
            exception_class = JavascriptException
        elif status in ErrorCode.SESSION_NOT_CREATED:
            exception_class = SessionNotCreatedException
        elif status in ErrorCode.INVALID_ARGUMENT:
            exception_class = InvalidArgumentException
        elif status in ErrorCode.NO_SUCH_COOKIE:
            exception_class = NoSuchCookieException
        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:
            exception_class = ScreenshotException
        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:
            exception_class = ElementClickInterceptedException
        elif status in ErrorCode.INSECURE_CERTIFICATE:
            exception_class = InsecureCertificateException
        elif status in ErrorCode.INVALID_COORDINATES:
            exception_class = InvalidCoordinatesException
        elif status in ErrorCode.INVALID_SESSION_ID:
            exception_class = InvalidSessionIdException
        elif status in ErrorCode.UNKNOWN_METHOD:
            exception_class = UnknownMethodException
        else:
            exception_class = WebDriverException
        if not value:
            value = response['value']
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and 'message' in value:
            message = value['message']
    
        screen = None  # type: ignore[assignment]
        if 'screen' in value:
            screen = value['screen']
    
        stacktrace = None
        st_value = value.get('stackTrace') or value.get('stacktrace')
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split('\n')
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = frame.get("lineNumber", "")
                        file = frame.get("fileName", "&lt;anonymous&gt;")
                        if line:
                            file = f"{file}:{line}"
                        meth = frame.get('methodName', '&lt;anonymous&gt;')
                        if 'className' in frame:
                            meth = "{}.{}".format(frame['className'], meth)
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if 'data' in value:
                alert_text = value['data'].get('text')
            elif 'alert' in value:
                alert_text = value['alert'].get('text')
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
&gt;       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element is not clickable at point (-130, 480)
E         (Session info: chrome=111.0.5563.65)
E       Stacktrace:
E       Backtrace:
E       	(No symbol) [0x0078DCE3]
E       	(No symbol) [0x007239D1]
E       	(No symbol) [0x00634DA8]
E       	(No symbol) [0x006652EA]
E       	(No symbol) [0x00663BBA]
E       	(No symbol) [0x00661EFB]
E       	(No symbol) [0x00661027]
E       	(No symbol) [0x00658D05]
E       	(No symbol) [0x0067AECC]
E       	(No symbol) [0x00658726]
E       	(No symbol) [0x0067B224]
E       	(No symbol) [0x0068D57C]
E       	(No symbol) [0x0067ACC6]
E       	(No symbol) [0x00656F68]
E       	(No symbol) [0x006580CD]
E       	GetHandleVerifier [0x00A03832+2506274]
E       	GetHandleVerifier [0x00A39794+2727300]
E       	GetHandleVerifier [0x00A3E36C+2746716]
E       	GetHandleVerifier [0x00836690+617600]
E       	(No symbol) [0x0072C712]
E       	(No symbol) [0x00731FF8]
E       	(No symbol) [0x007320DB]
E       	(No symbol) [0x0073C63B]
E       	BaseThreadInitThunk [0x76667D69+25]
E       	RtlInitializeExceptionChain [0x778CBB9B+107]
E       	RtlClearBits [0x778CBB1F+191]

C:\Users\User\AppData\Roaming\Python\Python310\site-packages\selenium\webdriver\remote\errorhandler.py:243: ElementClickInterceptedException</failure></testcase></testsuite></testsuites>